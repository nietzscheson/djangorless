"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
import logging
import socket

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = os.environ

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0*+o%s!d1re0uennz_vg7z2*-wtm37m8zf&h33q45ca^g9ei(g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.common',
    'django_s3_sqlite',
    'bootstrap5',
    'django_extensions',
    'apps.user'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath('templates'))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

USE_S3 = env.get("USER_S3", False)

# DB_SQLITE = {
#     'default': dj_database_url.config(default="sqlite://:memory:")
# }

DB_SQLITE = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

if USE_S3:

    DB_SQLITE = {
        "default": {
            "ENGINE": "django_s3_sqlite",
            "NAME": "sqlite.db",
            "BUCKET": env.get("AWS_STORAGE_BUCKET_NAME"),
        	"AWS_S3_ACCESS_KEY": env.get("AWS_S3_ACCESS_KEY"),  # optional, to lock down your S3 bucket to an IAM user
        	"AWS_S3_ACCESS_SECRET": env.get("AWS_S3_ACCESS_SECRET"),  # optional, to lock down your S3 bucket to an IAM user
        }
    }


DATABASES = DB_SQLITE

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings
    AWS_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
else:
    STATIC_URL = '/staticfiles/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/mediafiles/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "home"

AUTH_USER_MODEL = 'user.User'

COGNITO_USER_POOL_ID = env.get("COGNITO_USER_POOL_ID")
COGNITO_CLIENT_ID = env.get("COGNITO_CLIENT_ID")
COGNITO_CLIENT_SECRET = env.get("COGNITO_CLIENT_SECRET")

AUTHENTICATION_BACKENDS = ["core.backends.CognitoBackend"]

# Django Login Options
# See https://docs.djangoproject.com/en/3.2/topics/logging/
###############
# For this to work properly, in development environment the variables values must be:
# USE_CLOUDWATCH=False
# DEBUG=True

# the basic logger other apps can import
logger = logging.getLogger(__name__)

# the minimum reported level
LOGGING_LEVEL = os.getenv("LOGGING_LEVEL") or "INFO"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "level": LOGGING_LEVEL,
        "handlers": ["console"],
    },
    "formatters": {
        "formatter": {
            "format": "%(asctime)s [%(levelname)-8s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": LOGGING_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "formatter",
        },
        "sql": {
            "class": "logging.StreamHandler",
            "formatter": "formatter",
        },
    },
    "loggers": {
        "django.db.backends": {
            "level": LOGGING_LEVEL,
            "handlers": ["sql"],
        }
    },
}

USE_CLOUDWATCH = os.getenv("USE_CLOUDWATCH", "False") == "True"

if USE_CLOUDWATCH:
    AWS_LOG_GROUP = env["AWS_LOG_GROUP"]
    AWS_LOG_STREAM = env["AWS_LOG_STREAM"]
    AWS_LOGGER_NAME = env["AWS_LOGGER_NAME"]

    LOGGING["root"]["handlers"] = [AWS_LOGGER_NAME]
    LOGGING["formatters"] = {
        "aws": {
            "format": "%(asctime)s [%(levelname)-8s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    }
    LOGGING["handlers"] = {
        AWS_LOGGER_NAME: {
            "level": LOGGING_LEVEL,
            "class": "watchtower.django.DjangoCloudWatchLogHandler",
            "log_group": AWS_LOG_GROUP,
            "stream_name": AWS_LOG_STREAM,
            "formatter": "aws",
            "use_queues": False,
        },
    }

os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = socket.gethostbyname(socket.gethostname())
